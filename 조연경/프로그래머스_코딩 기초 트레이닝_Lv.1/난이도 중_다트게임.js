// 문제 설명
// 다트 게임

// 카카오톡 게임별의 하반기 신규 서비스로 다트 게임을 출시하기로 했다. 다트 게임은 다트판에 다트를 세 차례 던져 그 점수의 합계로 실력을 겨루는 게임으로, 모두가 간단히 즐길 수 있다.
// 갓 입사한 무지는 코딩 실력을 인정받아 게임의 핵심 부분인 점수 계산 로직을 맡게 되었다. 다트 게임의 점수 계산 로직은 아래와 같다.

// 다트 게임은 총 3번의 기회로 구성된다.
// 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.
// 점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.
// 옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다.
// 스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)
// 스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)
// 스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)
// Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.
// 스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.
// 0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

// 입력 형식
// "점수|보너스|[옵션]"으로 이루어진 문자열 3세트.
// 예) 1S2D*3T

// 점수는 0에서 10 사이의 정수이다.
// 보너스는 S, D, T 중 하나이다.
// 옵선은 *이나 # 중 하나이며, 없을 수도 있다.
// 출력 형식
// 3번의 기회에서 얻은 점수 합계에 해당하는 정수값을 출력한다.
// 예) 37

// 입출력 예제
// 예제	dartResult	answer	설명
// 1	1S2D*3T	37	11 * 2 + 22 * 2 + 33
// 2	1D2S#10S	9	12 + 21 * (-1) + 101
// 3	1D2S0T	3	12 + 21 + 03
// 4	1S*2T*3S	23	11 * 2 * 2 + 23 * 2 + 31
// 5	1D#2S*3S	5	12 * (-1) * 2 + 21 * 2 + 31
// 6	1T2D3D#	-4	13 + 22 + 32 * (-1)
// 7	1D2S3T*	59	12 + 21 * 2 + 33 * 2





// [다른 사람 풀이 보고 풀음]
function solution(dartResult) {
  // 보너스 점수 맵핑 (S: 1제곱, D: 2제곱, T: 3제곱)
  const bonus = { 'S': 1, 'D': 2, 'T': 3 };

  // 옵션 점수 맵핑 (*: 2배, #: -1배, 옵션이 없을 경우 1배)
  const options = { '*': 2, '#': -1, undefined: 1 };

  // 정규식을 이용하여 "숫자 + 보너스 + 옵션"을 한 묶음으로 추출
  let darts = dartResult.match(/\d.?\D/g);

  for (let i = 0; i < darts.length; i++) {
    // 정규식을 이용하여 각 다트 점수의 숫자, 보너스, 옵션 분리
    let split = darts[i].match(/(^\d{1,})(S|D|T)(\*|#)?/);

    // 점수 계산: (기본 점수^보너스) * 옵션
    let score = Math.pow(split[1], bonus[split[2]]) * options[split[3]];

    // '*' 옵션이 존재하면 이전 점수도 2배 처리
    if (split[3] === '*' && darts[i - 1]) darts[i - 1] *= options['*'];

    // 계산된 점수를 darts 배열에 저장
    darts[i] = score;
  }

  // 최종 점수 합산하여 반환
  return darts.reduce((a, b) => a + b);
}




//[정규식 사용 X 풀이]
function solution(dartResult) {
  const bonus = { 'S': 1, 'D': 2, 'T': 3 }; // 보너스 맵핑
  const scores = []; // 점수를 저장할 배열

  let num = ''; // 현재 숫자를 저장할 변수

  for (let i = 0; i < dartResult.length; i++) {
    let char = dartResult[i];

    // 숫자일 경우 (연속된 숫자도 포함 가능)
    if (!isNaN(char)) {
      num += char; // 10일 경우 대비하여 문자열로 저장
    }

    // 보너스 문자인 경우 (S, D, T)
    else if (char in bonus) {
      let score = Math.pow(Number(num), bonus[char]); // 숫자를 보너스 값만큼 제곱
      scores.push(score); // 점수를 배열에 저장
      num = ''; // 숫자 초기화
    }

    // 옵션 문자인 경우 (*, #)
    else {
      let lastIdx = scores.length - 1; // 마지막 점수의 위치

      if (char === '*') {
        scores[lastIdx] *= 2; // 현재 점수 2배
        if (lastIdx > 0) scores[lastIdx - 1] *= 2; // 이전 점수도 2배
      } else if (char === '#') {
        scores[lastIdx] *= -1; // 현재 점수를 마이너스로 변환
      }
    }
  }

  return scores.reduce((acc, cur) => acc + cur, 0); // 모든 점수 합산 후 반환
}
